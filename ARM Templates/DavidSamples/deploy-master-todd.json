/*
# Access granted under MIT Open Source License: https://en.wikipedia.org/wiki/MIT_License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, # and/or sell copies of the Software, 
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions 
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Created by: Brent Stineman
#
# Description: This file demonstrates the use of linked Azure Resource Manager (ARM) templates and techniques such 
# as passing objects into and out of the various linked templates. It also demonstrates using parameters, variables, 
# and objects to take a "generalized" input parameter (say: small, medium, large) and "explode" that into multiple 
# detailed settings
#
# For more about these techniques, see: https://brentdacodemonkey.wordpress.com/2017/03/09/azure-resource-manager-template-tips-and-tricks/
#
# Modifications
# 2018/04/13 : Initial publication
#
*/
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": { 
        "resourcePrefix": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "metadata": {
                "description": "The resource prefix (must be globally unique). only allows alpha characters." 
            }
        },
        "deploymentSize": {
            "type": "string",
            "defaultValue": "Small", 
            "allowedValues": [ 
                "Dev (not for production)", 
                "Small", 
                "Medium", 
                "Large"
            ], 
            "metadata": { 
                "description": "The general size of the deployment" 
            } 
        },
        "adminUser": {
            "type": "string",
            "metadata": {
                "description": "The admin user"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The password of the admin user"
            }
        },
        "vnetSubnetResourceId": {
            "type": "string",
            "metadata": {
                "description": "The Azure Resource ID of the subnet that we are deploying to"
            }
        },
        "privateLBFrontEndIPAddr": {
            "type": "string",
            "metadata": {
                "description": "The private IP of the front end load balancer"
            }
        },
        "sourceVaultRef": {
            "type": "string",
            "metadata": {
              "description": "The Azure Resource Id of the vault that contains the certificates used to secure the cluster"
            }
        },
        "clusterCertificateStorevalue": {
            "type": "string",
            "defaultValue": "My",
            "metadata": {
              "description": "The certificate store to be used to store the certificate on the node instance"
            }
        },
        "clusterCertificateUrlValue": {
            "type": "string",
            "metadata": {
              "description": "The URL of the certificate in the Key Vault to be used by the Service Fabric extension to secure node communications"
            }
        },
        "clusterCertificateThumbprint": {
            "type": "string",
            "metadata": {
              "description": "The thumbprint of the certification to be used for cluster authentication and the management endpoints (should be thumbprint of cert referred to by URL)"
            }
        },
        "templateBaseURL": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base location for all linked templates."
            }   
        },
        "templateSASToken": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The base location for all linked templates."
            }   
        }
    },
    "variables": {
        "deploymentAPI" : "2015-01-01",
        "StorageAccountName": "[concat(parameters('resourcePrefix'), 'store')]",
        "storageDeploymentName" : "DefaultStorageAccount",
        "StorageTemplateURI": "[concat(uri(parameters('templateBaseURL'), 'deploy-storageAccount.json'), parameters('templateSASToken'))]",
        "LoadBalancerTemplateURI": "[concat(uri(parameters('templateBaseURL'), 'deploy-loadbalancer.json'), parameters('templateSASToken'))]",
        "svcfabTemplateURI": "[concat(uri(parameters('templateBaseURL'), 'deploy-servicefabric-1nt-secure.json'), parameters('templateSASToken'))]",
        "vmssTemplateURI": "[concat(uri(parameters('templateBaseURL'), 'deploy-servicefabric-VMSS.json'), parameters('templateSASToken'))]",
        "svcfabDeploymentName" : "[concat(parameters('resourcePrefix'), '-svcfab')]",
        "svcFabSettings": {
            "tcpGatewayPort": "19000",
            "httpGatewayPort": "19080",
            "reverseProxyPort": "19008",
            "clusterPorts" : "1025-1027",
            "applicationStartPort": "20000",
            "applicationEndPort": "30000",
            "ephemeralStartPort": "49152",
            "ephemeralEndPort": "65534"
        },
        "privateLBName": "[concat(tolower(parameters('resourcePrefix')), 'private-lb')]",
        "frontEndAppPort1": "[variables('svcFabSettings')['httpGatewayPort']]",
        "frontEndAppPort2": "[variables('svcFabSettings')['tcpGatewayPort']]",
        "ProbePort" : 19080,
        "servicefabricLBIP1": "[parameters('privateLBFrontEndIPAddr')]",
        /* map sizing */
        "sizeParameters" : {
            "Dev (not for production)" : {
                "storageAccountType": "Standard_LRS",
                 "svcfab": {
                    "durabilityLevel" :"Bronze",
                    "reliabilityLevel" : "Bronze",
                    "nodeInstanceCount" : 3
                 },
                 "VMSSSettings" :  [
                    {
                        "Name" : "AppNode1", 
                        "nodeSize" : "Standard_A1",
                        "IsPrimary": true,
                        "InstanceCount": 3
                    }
                ]
            },
            "Small" : {
                "storageAccountType": "Standard_LRS",
                 "svcfab": {
                    "durabilityLevel" :"Bronze",
                    "reliabilityLevel" : "Bronze"
                 },
                 "VMSSSettings" :  [ 
                    {
                        "Name" : "NodeType1", 
                        "nodeSize" : "Standard_A1_v2",
                        "IsPrimary": true,
                        "InstanceCount": 3
                    }
                ]
            },
            "Medium" : {
                "storageAccountType": "Standard_GRS",
                 "svcfab": {
                    "durabilityLevel" :"Silver",
                    "reliabilityLevel" : "Silver"
                 },
                 "VMSSSettings" :  [ 
                    {
                        "Name" : "NodeType1", 
                        "nodeSize" : "Standard_D2_v2",
                        "IsPrimary": true,
                        "InstanceCount": 5
                    }
                ]
            },
            "Large" : {
                "storageAccountType": "Standard_RAGRS",
                 "svcfab": {
                    "durabilityLevel" :"Gold",
                    "reliabilityLevel" : "Gold"
                 },
                 "VMSSSettings" :  [ 
                    {
                        "Name" : "NodeType1", 
                        "nodeSize" : "Standard_D4_v2",
                        "IsPrimary": true,
                        "InstanceCount": 3
                    }
                ]
            }
        },
        /* cluster node type OS image */
        "nodeImageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
        }
    },
    "resources": [
        { 
            /* used by Service Fabric for diagnostics */
            "type": "Microsoft.Resources/deployments", 
            "name": "[variables('storageDeploymentName')]", 
            "apiVersion": "[variables('deploymentAPI')]", 
            "properties": { 
                "mode": "Incremental", 
                "templateLink": {
                    "uri": "[variables('StorageTemplateURI')]",
                    "contentVersion": "1.0.0.0"
                }, 
                "parameters": { 
                    "storageAccountName": { "value": "[variables('StorageAccountName')]" },
                    "storageAccountType": { "value": "[variables('sizeParameters')[parameters('deploymentSize')]['storageAccountType']]" }
                } 
            } 
        },
        /* set up private load balancer */ 
        { 
            "type": "Microsoft.Resources/deployments", 
            "name": "PrivateLoadBalancer", 
            "apiVersion": "[variables('deploymentAPI')]", 
            "properties": { 
                "mode": "Incremental", 
                "templateLink": {
                    "uri": "[variables('LoadBalancerTemplateURI')]",
                    "contentVersion": "1.0.0.0"
                }, 
                "parameters": { 
                    "loadbalancerName" : { "value": "[variables('privateLBName')]" },
                    "LoadBalancerIPConfig": { 
                        "value": {  
                            "subnet": {
                                "id": "[parameters('vnetSubnetResourceId')]"
                            },
                            "privateIPAddress": "[variables('servicefabricLBIP1')]",
                            "privateIPAllocationMethod": "Static"
                        }
                    },
                    "AppPort1": {
                        "value": {
                            "name": "HTTP",
                            "frontendPort": "[variables('frontEndAppPort1')]",
                            "backendPort": "[variables('frontEndAppPort1')]"
                        }
                    },
                    "AppPort2": {
                        "value": {
                            "name": "HTTPS",
                            "frontendPort": "[variables('frontEndAppPort2')]",
                            "backendPort": "[variables('frontEndAppPort2')]"
                        }
                    },
                    "ProbePort": { "value": "[variables('ProbePort')]" }
                } 
            } 
        },
        /* define the service fabric cluster */
        { 
            "type": "Microsoft.Resources/deployments", 
            "name": "[variables('svcfabDeploymentName')]", 
            "apiVersion": "[variables('deploymentAPI')]", 
            "properties": { 
                "mode": "Incremental", 
                "templateLink": {
                    "uri": "[variables('svcfabTemplateURI')]",
                    "contentVersion": "1.0.0.0"
                }, 
                "parameters": { 
                    "resourcePrefix": { "value": "[parameters('resourcePrefix')]" },
                    "svcFabSettings": { "value": "[variables('svcFabSettings')]"},
                    "managementEndpoint": { "value" : "[variables('servicefabricLBIP1')]" },
                    "nodeDetails": { "value": "[variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings']]" },
                    "storageAccountName" : { "value" : "[variables('StorageAccountName')]" },
                    "clusterCertificateThumbprint": { "value": "[parameters('clusterCertificateThumbprint')]" },
                    "clusterCertificateStorevalue": { "value": "[parameters('clusterCertificateStorevalue')]" }
                } 
            } 
        },
        /* define the primary node of the service fabric cluster (uses private LB) */
        {
            "type": "Microsoft.Resources/deployments", 
            "name": "[concat(variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings'][0]['Name'], '-vmss')]", 
            "apiVersion": "[variables('deploymentAPI')]",
            "dependsOn": [
                "[variables('svcfabDeploymentName')]"
            ],
            "properties": { 
                "mode": "Incremental", 
                "templateLink": {
                    "uri": "[variables('vmssTemplateURI')]",
                    "contentVersion": "1.0.0.0"
                }, 
                "parameters": { 
                    "vmssName": { "value": "[variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings'][0]['Name']]" },
                    "nodeSize": { "value": "[variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings'][0]['nodeSize']]" },
                    "adminUser": { "value": "[parameters('adminUser')]" },
                    "adminPassword": { "value": "[parameters('adminPassword')]" },
                    "nodeImageReference": { "value": "[variables('nodeImageReference')]" },
                    "nodeInstanceCount": { "value": "[variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings'][0]['InstanceCount']]" },
                    "ipConfig": { 
                        "value": {
                            "subnet": {
                                "id": "[parameters('vnetSubnetResourceId')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[reference('PrivateLoadBalancer').outputs.loadbalancerPools.value.BackEndPoolId]"
                                }
                            ]
                        }
                    },
                    "svcfabProtectedSettings": { 
                        "value": {
                            "StorageAccountKey1": "[reference(variables('storageDeploymentName')).outputs.properties.value.primaryKey]",
                            "StorageAccountKey2": "[reference(variables('storageDeploymentName')).outputs.properties.value.secondaryKey]"
                        }
                    },
                    "svcfabSettings": { 
                        "value": {
                            "clusterEndpoint": "[reference(variables('svcfabDeploymentName')).outputs.clusterEndpoint.value]",
                            "nodeTypeRef": "[variables('sizeParameters')[parameters('deploymentSize')]['VMSSSettings'][0]['Name']]",
                            "dataPath": "D:\\\\SvcFab",
                            "durabilityLevel": "[variables('sizeParameters')[parameters('deploymentSize')]['svcfab']['durabilityLevel']]",
                            "certificate": {
                                "thumbprint": "[parameters('clusterCertificateThumbprint')]",
                                "x509StoreName": "[parameters('clusterCertificateStoreValue')]"
                            }
                        }
                    },
                    "osSecrets" : {
                        "value" : [
                            {
                                "sourceVault": {
                                  "id": "[parameters('sourceVaultRef')]"
                                },
                                "vaultCertificates": [
                                  {
                                    "certificateUrl": "[parameters('clusterCertificateUrlValue')]",
                                    "certificateStore": "[parameters('clusterCertificateStorevalue')]"
                                  }
                                ]
                            }
                        ]
                    }
                } 
            } 
        }        
    ],
    "outputs": {
    }
}
