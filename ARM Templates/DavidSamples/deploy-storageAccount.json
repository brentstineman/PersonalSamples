/*
# Access granted under MIT Open Source License: https://en.wikipedia.org/wiki/MIT_License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, # and/or sell copies of the Software, 
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions 
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
# DEALINGS IN THE SOFTWARE.
#
# Created by: Brent Stineman
#
# Description: This template will create an encrypted storage account. The template then outputs the account
# access keys.  
#
# For more about these techniques, see: https://brentdacodemonkey.wordpress.com/2017/03/09/azure-resource-manager-template-tips-and-tricks/
#
# Modifications
# 2017/04/19 : Initial publication
#
*/
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": { 
        "storageAccountName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 15,
            "metadata": {
                "description": "The unique storage account for use by Nether. only allows alpha characters and '-'. Cannot start or end with '-'."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "Account type, premium vs standard, and local, zone, global, global read only redundancy"
            }
        }
    },
    "variables": {
        "stgApiVersion": "2016-01-01",
        "storageAccountName" : "[toLower(parameters('storageAccountName'))]",
        "accountResourceId" : "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
    },
    "resources": [
        /* An Azure storage account */
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "[variables('stgApiVersion')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Storage Account"
            },
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageAccountType')]",
                "tier": "Standard"
            },
            "properties": {
                "encryption": { 
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": { "enabled": true }
                    }
                }
            }
        }
    ],
    /* outputs: 
    *   properties: an object that describes details about the storage account
    */
    "outputs": {
        "properties" : {
            "type" : "object",
            "value": {
                "resourceId" : "[variables('accountResourceId')]",
                "accountName" : "[variables('storageAccountName')]",
                "primaryKey": "[listKeys(variables('accountResourceId'), variables('stgApiVersion')).keys[0].value]",
                "secondaryKey": "[listKeys(variables('accountResourceId'), variables('stgApiVersion')).keys[1].value]"
            }
        }
    }
}